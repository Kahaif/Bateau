/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiV1ShipsGet$Json } from '../fn/ships/api-v-1-ships-get-json';
import { ApiV1ShipsGet$Json$Params } from '../fn/ships/api-v-1-ships-get-json';
import { apiV1ShipsGet$Plain } from '../fn/ships/api-v-1-ships-get-plain';
import { ApiV1ShipsGet$Plain$Params } from '../fn/ships/api-v-1-ships-get-plain';
import { apiV1ShipsIdDelete$Json } from '../fn/ships/api-v-1-ships-id-delete-json';
import { ApiV1ShipsIdDelete$Json$Params } from '../fn/ships/api-v-1-ships-id-delete-json';
import { apiV1ShipsIdDelete$Plain } from '../fn/ships/api-v-1-ships-id-delete-plain';
import { ApiV1ShipsIdDelete$Plain$Params } from '../fn/ships/api-v-1-ships-id-delete-plain';
import { apiV1ShipsIdPut$Json } from '../fn/ships/api-v-1-ships-id-put-json';
import { ApiV1ShipsIdPut$Json$Params } from '../fn/ships/api-v-1-ships-id-put-json';
import { apiV1ShipsIdPut$Plain } from '../fn/ships/api-v-1-ships-id-put-plain';
import { ApiV1ShipsIdPut$Plain$Params } from '../fn/ships/api-v-1-ships-id-put-plain';
import { apiV1ShipsPost$Json } from '../fn/ships/api-v-1-ships-post-json';
import { ApiV1ShipsPost$Json$Params } from '../fn/ships/api-v-1-ships-post-json';
import { apiV1ShipsPost$Plain } from '../fn/ships/api-v-1-ships-post-plain';
import { ApiV1ShipsPost$Plain$Params } from '../fn/ships/api-v-1-ships-post-plain';
import { ShipDto } from '../models/ship-dto';

@Injectable({ providedIn: 'root' })
export class ShipsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiV1ShipsGet()` */
  static readonly ApiV1ShipsGetPath = '/api/v1/Ships';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsGet$Plain$Response(params?: ApiV1ShipsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsGet$Plain(params?: ApiV1ShipsGet$Plain$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsGet$Json$Response(params?: ApiV1ShipsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsGet$Json(params?: ApiV1ShipsGet$Json$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /** Path part for operation `apiV1ShipsPost()` */
  static readonly ApiV1ShipsPostPath = '/api/v1/Ships';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsPost$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsPost$Plain$Response(params?: ApiV1ShipsPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsPost$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsPost$Plain(params?: ApiV1ShipsPost$Plain$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsPost$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsPost$Json$Response(params?: ApiV1ShipsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsPost$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsPost$Json(params?: ApiV1ShipsPost$Json$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /** Path part for operation `apiV1ShipsIdPut()` */
  static readonly ApiV1ShipsIdPutPath = '/api/v1/Ships/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsIdPut$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdPut$Plain$Response(params: ApiV1ShipsIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsIdPut$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdPut$Plain(params: ApiV1ShipsIdPut$Plain$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsIdPut$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdPut$Json$Response(params: ApiV1ShipsIdPut$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsIdPut$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsIdPut$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdPut$Json(params: ApiV1ShipsIdPut$Json$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsIdPut$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /** Path part for operation `apiV1ShipsIdDelete()` */
  static readonly ApiV1ShipsIdDeletePath = '/api/v1/Ships/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsIdDelete$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdDelete$Plain$Response(params: ApiV1ShipsIdDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsIdDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsIdDelete$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdDelete$Plain(params: ApiV1ShipsIdDelete$Plain$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsIdDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiV1ShipsIdDelete$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdDelete$Json$Response(params: ApiV1ShipsIdDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ShipDto>>> {
    return apiV1ShipsIdDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiV1ShipsIdDelete$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiV1ShipsIdDelete$Json(params: ApiV1ShipsIdDelete$Json$Params, context?: HttpContext): Observable<Array<ShipDto>> {
    return this.apiV1ShipsIdDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ShipDto>>): Array<ShipDto> => r.body)
    );
  }

}
