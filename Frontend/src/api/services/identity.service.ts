/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AccessTokenResponse } from '../models/access-token-response';
import { apiForgotPasswordPost } from '../fn/identity/api-forgot-password-post';
import { ApiForgotPasswordPost$Params } from '../fn/identity/api-forgot-password-post';
import { apiLoginPost } from '../fn/identity/api-login-post';
import { ApiLoginPost$Params } from '../fn/identity/api-login-post';
import { apiManage2FaPost } from '../fn/identity/api-manage-2-fa-post';
import { ApiManage2FaPost$Params } from '../fn/identity/api-manage-2-fa-post';
import { apiManageInfoGet } from '../fn/identity/api-manage-info-get';
import { ApiManageInfoGet$Params } from '../fn/identity/api-manage-info-get';
import { apiManageInfoPost } from '../fn/identity/api-manage-info-post';
import { ApiManageInfoPost$Params } from '../fn/identity/api-manage-info-post';
import { apiRefreshPost } from '../fn/identity/api-refresh-post';
import { ApiRefreshPost$Params } from '../fn/identity/api-refresh-post';
import { apiRegisterPost } from '../fn/identity/api-register-post';
import { ApiRegisterPost$Params } from '../fn/identity/api-register-post';
import { apiResendConfirmationEmailPost } from '../fn/identity/api-resend-confirmation-email-post';
import { ApiResendConfirmationEmailPost$Params } from '../fn/identity/api-resend-confirmation-email-post';
import { apiResetPasswordPost } from '../fn/identity/api-reset-password-post';
import { ApiResetPasswordPost$Params } from '../fn/identity/api-reset-password-post';
import { InfoResponse } from '../models/info-response';
import { mapIdentityApiApiConfirmEmail } from '../fn/identity/map-identity-api-api-confirm-email';
import { MapIdentityApiApiConfirmEmail$Params } from '../fn/identity/map-identity-api-api-confirm-email';
import { TwoFactorResponse } from '../models/two-factor-response';

@Injectable({ providedIn: 'root' })
export class IdentityService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiRegisterPost()` */
  static readonly ApiRegisterPostPath = '/api/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRegisterPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiRegisterPost$Response(params?: ApiRegisterPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiRegisterPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRegisterPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiRegisterPost(params?: ApiRegisterPost$Params, context?: HttpContext): Observable<void> {
    return this.apiRegisterPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiLoginPost()` */
  static readonly ApiLoginPostPath = '/api/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiLoginPost$Response(params?: ApiLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<AccessTokenResponse>> {
    return apiLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiLoginPost(params?: ApiLoginPost$Params, context?: HttpContext): Observable<AccessTokenResponse> {
    return this.apiLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<AccessTokenResponse>): AccessTokenResponse => r.body)
    );
  }

  /** Path part for operation `apiRefreshPost()` */
  static readonly ApiRefreshPostPath = '/api/refresh';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRefreshPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiRefreshPost$Response(params?: ApiRefreshPost$Params, context?: HttpContext): Observable<StrictHttpResponse<AccessTokenResponse>> {
    return apiRefreshPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRefreshPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiRefreshPost(params?: ApiRefreshPost$Params, context?: HttpContext): Observable<AccessTokenResponse> {
    return this.apiRefreshPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<AccessTokenResponse>): AccessTokenResponse => r.body)
    );
  }

  /** Path part for operation `mapIdentityApiApiConfirmEmail()` */
  static readonly MapIdentityApiApiConfirmEmailPath = '/api/confirmEmail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mapIdentityApiApiConfirmEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  mapIdentityApiApiConfirmEmail$Response(params?: MapIdentityApiApiConfirmEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return mapIdentityApiApiConfirmEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mapIdentityApiApiConfirmEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mapIdentityApiApiConfirmEmail(params?: MapIdentityApiApiConfirmEmail$Params, context?: HttpContext): Observable<void> {
    return this.mapIdentityApiApiConfirmEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiResendConfirmationEmailPost()` */
  static readonly ApiResendConfirmationEmailPostPath = '/api/resendConfirmationEmail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiResendConfirmationEmailPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiResendConfirmationEmailPost$Response(params?: ApiResendConfirmationEmailPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiResendConfirmationEmailPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiResendConfirmationEmailPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiResendConfirmationEmailPost(params?: ApiResendConfirmationEmailPost$Params, context?: HttpContext): Observable<void> {
    return this.apiResendConfirmationEmailPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiForgotPasswordPost()` */
  static readonly ApiForgotPasswordPostPath = '/api/forgotPassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiForgotPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiForgotPasswordPost$Response(params?: ApiForgotPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiForgotPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiForgotPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiForgotPasswordPost(params?: ApiForgotPasswordPost$Params, context?: HttpContext): Observable<void> {
    return this.apiForgotPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiResetPasswordPost()` */
  static readonly ApiResetPasswordPostPath = '/api/resetPassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiResetPasswordPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiResetPasswordPost$Response(params?: ApiResetPasswordPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiResetPasswordPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiResetPasswordPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiResetPasswordPost(params?: ApiResetPasswordPost$Params, context?: HttpContext): Observable<void> {
    return this.apiResetPasswordPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiManage2FaPost()` */
  static readonly ApiManage2FaPostPath = '/api/manage/2fa';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiManage2FaPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiManage2FaPost$Response(params?: ApiManage2FaPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TwoFactorResponse>> {
    return apiManage2FaPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiManage2FaPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiManage2FaPost(params?: ApiManage2FaPost$Params, context?: HttpContext): Observable<TwoFactorResponse> {
    return this.apiManage2FaPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TwoFactorResponse>): TwoFactorResponse => r.body)
    );
  }

  /** Path part for operation `apiManageInfoGet()` */
  static readonly ApiManageInfoGetPath = '/api/manage/info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiManageInfoGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiManageInfoGet$Response(params?: ApiManageInfoGet$Params, context?: HttpContext): Observable<StrictHttpResponse<InfoResponse>> {
    return apiManageInfoGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiManageInfoGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiManageInfoGet(params?: ApiManageInfoGet$Params, context?: HttpContext): Observable<InfoResponse> {
    return this.apiManageInfoGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<InfoResponse>): InfoResponse => r.body)
    );
  }

  /** Path part for operation `apiManageInfoPost()` */
  static readonly ApiManageInfoPostPath = '/api/manage/info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiManageInfoPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiManageInfoPost$Response(params?: ApiManageInfoPost$Params, context?: HttpContext): Observable<StrictHttpResponse<InfoResponse>> {
    return apiManageInfoPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiManageInfoPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiManageInfoPost(params?: ApiManageInfoPost$Params, context?: HttpContext): Observable<InfoResponse> {
    return this.apiManageInfoPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<InfoResponse>): InfoResponse => r.body)
    );
  }

}
